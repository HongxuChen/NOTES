* Hello World
* Fundamentals
** =setq=, =defvar=
#+BEGIN_SRC elisp
(defvar variable-name value
  "document string")
#+END_SRC
** =let=, =let*=
#+BEGIN_SRC elisp
(defun circle-area (radix)
  (let
    ((pi 3.1415926) area) ;; the varlist, but area cannot use pi now
    (setq area (* pi  radix radix))
    (message "radius=%.2f, area=%.2f" radix area)))
(circle-area 2.0)
#+END_SRC
#+BEGIN_SRC elisp
(defun circle-area (radix)
  "calculate circle area with the radius of `RADIX'"
  (let*
      ((pi 3.1415926) (area (* pi radix radix))) ;; area can use pi now
    (message "radius=%.2f, area=%.2f" radix area)
    ))
(circle-area 3)
#+END_SRC
** lambda expression
#+BEGIN_SRC elisp
(setq lambda_foo
      (lambda (name)
       (message "hello, %s" name) ))
(funcall lambda_foo "Emacser")
#+END_SRC
** control structure:
*** sequential: =progn=; no need to use it when in special environment like =defun=
*** conditional:
**** =when= and =unless= when the value of the conditional expression is *not* important
**** use =and= / =or= when:
***** return value is used by calling code
***** tests are to be carried out sequentially until one fails(=and=) or succeeds(=or=), or until all have been tried
**** =if= when only one condition, then and else branches
**** =cond= when there a several test cases, similar with =or=, but evaluates a sequence of other sexps(implicit =progn=)
**** =case= (part of =cl= package) if the same value is to be compared against several values(using =eql=).
#+BEGIN_SRC elisp
(defun my/fib (n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (t (+ (my/fib (- n 1)) (my/fib (- n 2))))))
(my/fib 19)
#+END_SRC
*** loop =while=
#+BEGIN_SRC elisp
(defun my-fact (n)
  (let ((res 1))
    (while (> n 0)
      (setq res (* res n)
            n (- n 1)))
    res))
(my-fact 10)
#+END_SRC
** logic operation
*** =and= / =or= both has short-cut properties
*** =and= can be used to replace =when=
*** =or= can be used to replace =unless=.
#+BEGIN_SRC elisp
(defun hello-world (&optional name)
  (or name (setq name "Emacser"))
  (message "hello, %s" name))
#+END_SRC
#+BEGIN_SRC elisp
(defun square-number-p (n)
  (and (>= n 0) (= (/ n (sqrt n)) (sqrt n))))
(square-number-p -1)
(square-number-p 25)
(square-number-p 1024) ;; wrong for this one
#+END_SRC

* Numbers
** test functions
#+BEGIN_SRC elisp
(integerp 1.)  ;;t
(integerp 1.0) ;;nil
(floatp 1.)  ;;nil
(floatp -0.0e+NaN) ;;t
(numberp 1)  ;;t
#+END_SRC
** comparison
#+BEGIN_SRC elisp
(setq foo (- (+ 1.0 1.0e-3) 1.0))
(setq bar 1.0e-3)
(= foo bar) ;;nil
#+END_SRC
#+BEGIN_SRC elisp
(setq foo (- (+ 1.0 1.0e-3) 1.0))
(setq bar 1.0e-3)
(defvar fuzzy-factor 10e-6)
(defun float-equal (x y)
  (or
   (and (= x 0) (= y 0))
   (< (/ (abs (- x y)) (max (abs x) (abs y))) fuzzy-factor)
   ))
(float-equal foo bar)
#+END_SRC
** conversion
**** integer->float:float
**** float->integer:truncate,floor,celling,round
** calculation
*** absolute value: =mod= and =%=
#+BEGIN_SRC elisp
(+ (% dividend divisor)
   (* (/ dividend divisor) divisor));; EQUALS dividend
(+ (mod dividend divisor)
   (* (floor dividend divisor) divisor)) ;; EQUALS dividend
#+END_SRC
*** sin,cos,tan,asin,acos,atan
*** sqrt,exp,log10,random
** variables: =most-positive-fixnum=, =most-negative-fixnum=
* Character and String
#+BEGIN_SRC elisp
(and ?\^I ?\^i ?\C-I ?\C-i ?\t) ;; 9
(logior (lsh 1 27) ?A)  ;; 134217793
?\M-A                   ;; 134217793
?\M-\C-b, ?\C-\M-b      ;; 134217730
#+END_SRC
** test function:
**** string-or-null-p, char-or-string-p
**** no ~charp~ since chars are integers
#+BEGIN_SRC elisp
(defun string-emptyp (str)
  (not) (string< "" str))
#+END_SRC
*** construction
**** make-string, string
**** substring, concat
#+BEGIN_SRC elisp
(make-string 5 ?x)
(string ?a ?b ?c)
(substring "0123456789" 3)
(substring "123456789" 3 5)
(substring "123456789" -3 -1)
(concat "abc" "a")
#+END_SRC
** comparison of strings:
*** char-equal(be careful with *case-fold-search*)
*** string=/string-equal, string</string-less
** conversion functions
*** char-to-string, string-to-char
*** number-to-string, string-to-number
#+BEGIN_SRC elisp
(string-to-number "256")
(number-to-string 256)
(format "%o" 256)
(format "%#x" 524287) ;; char in string upper bound
#+END_SRC
#+BEGIN_SRC elisp
(defun number-to-bin-string (number)
  (require 'calculator)
  (let ((calculator-output-radix 'bin)
    (calculator-radix-grouping-mode nil))
  (calculator-number-to-string number)))
(number-to-bin-string 256)
#+END_SRC
*** concat, vconcat, append
#+BEGIN_SRC elisp
(concat '(?a ?b ?c ?d ?e))
(concat [?a ?b ?c ?d ?e])
(concat (list ?a ?b ?c ?d ?e))
(vconcat "abcde") ;; [97 98 99 100 101], string->vector
(append "abcde" nil) ;; (97 98 99 100 101), string->list
#+END_SRC
*** downcase, upcase; capitalize, upcase-initials
#+BEGIN_SRC elisp
(downcase "The cat in the hat") ;; "the cat in the hat"
(downcase ?X)    ;;120
(upcase "The cat in the hat") ;; "THE CAT IN THE HAT"
(upcase ?x)      ;;88
(capitalize "The CAT in tHe Hat")  ;; "The Cat In The Hat"
(upcase-initials "The CAT in the HAt")  ;; "The CAT In The HAt"
#+END_SRC
** format strings:
*** format
** search and replace
*** string-match,string-match-p; match-data, match-beginning, match-end
#+BEGIN_SRC elisp
(string-match-p "2*" "232*3=696")  ;; 0, regex
(string-match (regexp-quote "2*") "232*3=696")  ;; 2
(string-match "2\\*" "232*3=696")
(progn (string-match "3\\(4\\)" "01234567890123456789")
       (match-data))  ;;TODO (3 5 4 5)
(let ((start 0))
  (while (string-match "34" "01234567890123456789" start)
    (princ (format "find at %d\n" (match-beginning 0)))
    (setq start (match-end 0)))) ;; update start
#+END_SRC
*** replace-match, replace-regex-in-string, subst-char-in-string
#+BEGIN_SRC elisp
(let ((str "01234567890123456789"))
  (print str)
  (string-match "34" str)
  (princ (replace-match "x" nil nil str 0))
  (princ "\n")
  (print str))
#+END_SRC
* =cons cell= and =list=
#+BEGIN_SRC elisp
'(?a . 1)
'(1 . "a")
'(1 . nil)
'(nil nil)
'(nil . nil)
(read "(1 . 2)") ;; (1 . 2)
nil   ;; nil is not `cons cell'
(car '())
(cdr nil)
#+END_SRC
#+BEGIN_TABLE
| type of list  | the CDR of last cons cell     |
|---------------+-------------------------------|
| true list     | nil                           |
| dotted list   | neither =nil= nor =cons cell= |
| circular list | point to previous cons cell   |
#+END_TABLE
#+BEGIN_SRC elisp
'(1 2 "a")   ;; (1 2 "a"), true list
'(1 . (2 . (3 . nil))) ;;(1 2 3)
'(1 2 . "a") ;; (1 2 . "a"), dotted list
'(1 . #1= (2 3 . #1#))  ;; (1 2 3 . #1), circular list
#+END_SRC
** test function
NO built-in function testing whether a cons cell is *true list* since it's costly.
#+BEGIN_SRC elisp
(consp '(1 . 2))  ;;t
(consp '(1 . (2 . nil))) ;; t
(consp nil)  ;;nil
(listp '(1 . 2))  ;;t
(listp '(1 . (2 . nil))) ;;t
(listp nil)  ;;t
#+END_SRC
** construction
#+BEGIN_SRC elisp
(cons 1 2) ;;(1 . 2)
(cons 1 '());;(1)
(cons 1 nil) ;; (1)
(cons 1 '(nil))  ;; (1 nil)
(cons '(1 2) 3)
(prog2 (setq foo '(a b))
       (cons 'x foo) foo)
(progn (setq foo '(a b))
       (push 'x foo) foo)  ;;(x a b)
(list (+ 1 2) 3 4)  ;;(3 3 4)
'((+ 1 2) 3)  ;;((+ 1 2) 3)
;; append change the last nil of the former to the sequential recursively
(append '(a b) '(c)) ;;(a b c)
(cons '(a b) '(c)) ;;((a b) c)
;; last element of append is not required to be LIST
(append '(a b) 'c)  ;;(a b . c)
(append [a b] "cd" nil) ;;(a b 99 100)
#+END_SRC
** use list as array
#+BEGIN_SRC elisp
(nth 3 '(2 4 6 8 10)) ;;8
(nthcdr 2 '(2 4 6 8 10)) ;;(6 8 10)
(last '(2 4 6 8 10) 2) ;;(8 10)
(butlast '(2 4 6 8 10) 2) ;;(2 4 6)
(progn (setq foo '(a b c) ;; (a b c)
             (setcar foo 'x)
             foo  ;;(x b c)
             (setcdr foo '(o p q))
             foo  ;;(x o p q)
             ))
(progn (setq foo '(a b c))
       (setcdr foo foo)) ;;(a . #0)
(progn (setq foo '(1 2 3))
       (setcar foo 'a)
       (setcar (cdr foo) 'b)
       foo  ;; (a b 3)
       (setcar (nthcdr 2 foo) 'c)
       foo  ;;(a b c)
       )
#+END_SRC
** use list as stack/heap
#+BEGIN_SRC elisp
(setq foo nil)
(push 'a foo)
(push 'b foo)
(pop foo)
foo ;; (a)
#+END_SRC
** rearrange list
#+BEGIN_SRC elisp
(setq foo '(a b c))
(reverse foo) ;;(c b a)
foo ;;(a b c)
(nreverse foo) ;;(c b a)
foo  ;;(a) destroyed pointer
(setq foo '(3 2 4 1 5))
(sort foo '<) ;;(1 2 3 4 5)
foo  ;;(3 4 5)
#+END_SRC
** use list as set
*** union: =append=
*** delete duplicates: =delete-dups=
*** equality/remove/delete:
**** =memq=, =remq=, =delq= (with =eq=)
**** =member=, =remove=,, =delete= (with =equal=)
#+BEGIN_SRC elisp
(setq foo '(a b c))
(remq 'b foo)  ;;(a c)
foo            ;;(a b c)
(delq 'b foo)  ;;(a c)
foo            ;;(a c)
#+END_SRC

** use list as association list
hash table VIRSUS association list
#+BEGIN_TABLE
|                   | hash table | association list   |
|-------------------+------------+--------------------|
| key               | no order   | ordered            |
| functions         | maphash    | all list functions |
| read/input syntax | no         | yes                |
#+END_TABLE
#+BEGIN_SRC elisp
(assoc "a" '(("a" 97) ("b" 98))) ;;("a" 97), `equal'
(setq a_v (assq 'a '((a . 97) (b . 98)))) ;;(a . 97) `eq'
(cdr (assoc "a" '(("a" 97) ("b" 98))))  ;;(97)
(cdr a_v) ;;(97)
(assoc-default "a" '(("a" 97) ("b" 98))) ;;(97)
(rassoc '(97) '(("a" 97) ("b" 98)))        ;;("a" 97)
(rassq '97 '((a . 97) (b . 98))) ;;(a . 97)
#+END_SRC
#+BEGIN_SRC elisp
(setq foo '(("a" . 97) ("b" . 98)))
(progn (if (setq bar (assoc "a" foo))
    (setcdr bar "this is a")
  (setq foo (cons '("a" . "this is a") foo)))
foo)
(setq foo (cons '("a" . "this is a")
                (delq (assoc "a" foo) foo)))
#+END_SRC
** use list as tree
** traverse list
#+BEGIN_SRC elisp
(setq mylist '(1 2 3))
(mapc '1+ mylist)  ;;(1 2 3), only used for side effect
(mapcar '1+ mylist) ;;(2 3 4), return value changed
mylist ;;(1 2 3)

(dolist (foo '(1 2 3)) (incf foo))  ;;nil
(progn
(setq bar nil)
(dolist (foo '(1 2 3) bar)
  (push (incf foo) bar)) ;;(4 3 2)
)
#+END_SRC
** other functions
*** filter:remove-if,remove-fi-not(=cl=)
#+BEGIN_SRC elisp
(defun my-remove-if (predicate list)
  (delq nil (mapcar
             (lambda (n) (and (not (funcall predicate n)) n))
             list)))
(defun evenp (n) (= (% n 2) 0))
(my-remove-if 'evenp '(0 1 2 3 4 5))
#+END_SRC
#+BEGIN_SRC elisp
(defun my-fold-left (op initial list)
  (dolist (var list initial)
    (setq initial (funcall op initial var))))
(my-fold-left '+ 0 '(1 2 3 4)) ;; 10
#+END_SRC
*** split-string, mapconcat, identity
#+BEGIN_SRC elisp
(split-string "key =   val" "\\s-*=\\s-*")  ;; ("key" "val")
(mapconcat 'identity '("a" "b" "c") "_\t")  ;;"a_    b_    c"
#+END_SRC
** Q&A
*** write a self-defined nthcdr
#+BEGIN_SRC elisp
;; TODO verify it is wrong in elispintro.pdf
(defun my-nthcdr (n list)
  (if (or (null list) (= n 0))
      (cdr list)
    (my-nthcdr (1- n) (cdr list))))
(setq my-list '(9 8 7 6))
(setcar (my-nthcdr 1 my-list) 3)
my-list  ;;(9 8 3 6)
#+END_SRC
*** define my-subseq
#+BEGIN_SRC elisp
(defun my-subseq (list from &optional to)
                       (if (null to)
                           (nthcdr from list)
                         (butlast (nthcdr from list) (- (length list) to))))

(my-subseq '(1 2 3 4 5 6) 2 4) ;;(3 4)
#+END_SRC

* =seq= and =array=
all arrays have the features below:
- The index starts from 0 and access of some element is in constant time
- No way the change the length once created
- self-evaluated(no need of =quote=)
- accessed by =aref=, and set by =aset=
[[file:../images/seq_array.png]]
** test functions: 
*** sequencep, arrayp, vectorp, bool-vector-p
** general list functions:
#+BEGIN_SRC elisp
(safe-length '(a . b))  ;;1
(length '(a . b)) ;; error
(safe-length '#1= (1 2 . #1#))  ;; 3
#+END_SRC
** array operations
#+BEGIN_SRC elisp
(vector 'foo 23 [bar baz] "rats");;[foo 23 [bar baz] "rats"]
(make-vector 9 'z)
(fillarray (make-vector 4 'z) 5)
(vconcat [a b c] "aa" '(foo (6 7)))
#+END_SRC
** Q&A
*** test whethere some list is circular list
#+BEGIN_SRC elisp
(defun circular-list-p (list)
(and (consp list)
     (circular-list-p-1 (cdr list) list 0)))
(defun circular-list-p-1 (tail halftail len)
  (if (eq tail halftail)
      t
    (if (consp tail)
        (circular-list-p-1 (cdr tail)
                           (if (= (% len 2) 0)
                               (cdr halftail)
                             halftail)
                           (1+ len))
      nil)))
(setq foo '(1 2 3))
(circular-list-p foo)
(setcdr foo foo)
(circular-list-p foo)
#+END_SRC
*** TODO my-tr
#+BEGIN_SRC elisp
(defun my-tr (str from to)
  (if (= (length to) 0)
      (progn
        (setq from (append from nil))
        (concat
         (delq nil
               (mapcar (lambda (c)
                         (if (member c from)
                             nil c))
                       (append str nil)))))
    (let (table newstr pair)
      (dotimes (i (length from))
        (push (cons (aref from i) (aref to i)) table))
      (dotimes (i (length str))
        (push
         (if (setq pair (assoc (aref str i) table))
             (cdr pair)
           (aref str i))
         newstr))
      (concat (nreverse newstr) nil))))
(my-tr "abcdefg" "ace" "ACE")
#+END_SRC
* Symbols
case-sensitive
#+BEGIN_SRC elisp
(symbolp '+1) ;; nil
(symbol-name '+1) ;; error
;; add `\' to be a symbol
(symbolp '\+1) ;; t
(symbol-name '\+1) ;; "+1"
(symbol-name '\t) ;; "t"
#+END_SRC
** create symbols
*** There is global variable called =obarray= that associates the *symbol* and its *name*, which is a vector in elisp
*** emacs would calculate the hash of the name and get the subscript whenever creating a symbol.
*** whenever reading a symbol, it would check whether it is inside =obarray=; add it if not, which is called ~intern~ terminologically(defaults to =obarray=)
#+BEGIN_SRC elisp
(setq foo (make-vector 3 'a))
(intern-soft "abc" foo) ;; nil
(intern "abc" foo) ;; abc
(intern-soft "abc" foo) ;; abc
foo  ;; [abc a a]

(intern-soft "abc") ;; nil
'abc  ;; abc
(intern-soft "abc") ;; abc
(intern-soft "abcd")
'#:abcd
(intern-soft "abcd") ;;nil

(intern-soft "abc" foo) ;; abc
(unintern "abc" foo);; t
(intern-soft "abc" foo) ;; nil
#+END_SRC
#+BEGIN_SRC elisp
(progn
(setq count 0)
  (mapatoms (lambda (s) (setq count (1+ count))))
count)
(length obarray) ;; 1511
#+END_SRC
** constructs of symbols
A symbol is consisted of 4 parts: =symbol-name=, =symbol-value=, =symbol-function=, =symbol-plist=
#+BEGIN_SRC elisp
(set (intern "abc" foo) "I'm abc") ;; setq can ONLY used for `obarray'
(vectorp foo) ;; t
(symbol-value (intern "abc" foo))
#+END_SRC
#+BEGIN_SRC elisp
(fset (intern "abc" foo) (symbol-function 'car)) ;; #<subr car>
(funcall (intern "abc" foo) '(a . b)) ;; a
#+END_SRC
properties are all put in property-list, which is faster than association-list; however add elem at the header of association-list is quite fast, and property-list cannot delete a property instance.
#+BEGIN_SRC elisp
(put (intern "abc" foo) 'doc "this is abc")
(put (intern "abc" foo) 'nonsense "its name")
(get (intern "abc" foo) 'doc) ;; "this is abc"
(symbol-plist (intern "abc" foo)) ;; (doc "this is abc" nonsense "its name")
(symbol-plist (intern-soft"auto-mode-alist")) ;; (variable-documentation 1767350 risky-local-variable t)
#+END_SRC
#+BEGIN_SRC elisp
;; some more property list operations
(plist-get '(foo 4) 'foo) ;; 4; (foo 4) is just a property-list!
(plist-get '(foo 4 bad) 'bar) ;;nil
(setq my-plist '(foo 4 bar 3)) ;;(foo 4 bar 3)
(setq my-plist (plist-put my-plist 'foo 69)) ;;(foo 69 bar 3)
(setq my-plist (plist-put my-plist 'quax '(a))) ;; (foo 69 bar 3 quax (a))
#+END_SRC
** Q&A
*** TODO Why =obarray= has more symbols that vector length?
*** TODO delete element according to keyword of some assoc list
*** TODO =my-plist-get=, =my-plist-put= implementation
#+BEGIN_SRC elisp
(defun my-plist-get (plist prop)
  (cadr (memq prop plist)))
(my-plist-get '(foo 4 bar 9) 'bar)
#+END_SRC

* Evaluation Rules
=form= (elisp object to be evaluated) in elisp:
** self-evaluated: number, string, vector, t, nil
** symbol: nil \rightarrow void-variable
** list form: 
*** rule:
If the first element of the list form is a =symbol=, it would look up its function value recursively(called *symbol function indirection*) until the function value is a /function call/, /macro call/,  /special form/ or /autoload object/; otherwise it would emit *invalid-function*
*** categoried into 3 according to 1st element
**** function call(lisp function object, byte-code object, primitive function): evaluate other elements in the list and take the result as the actual params, ~apply~ these params after
**** TODO macro call, other element in the list would NOT be evaluated but expanded instead recursively until there would be no macro
**** special form
#+BEGIN_SRC elisp
;; imatation of indirection function
(symbol-function 'car) ;; #<subr car>
(fset 'first 'car) ;; car
(fset 'erste 'first) ;; first
(erste '(1 2 3)) ;; 1
#+END_SRC
*** psedo code for evaluation in elisp
#+BEGIN_SRC elisp
(defun (EVAL expr)
  (cond
   ((numberp expr) expr)
   ((stringp expr) expr)
   ((arrayp expr) expr)
   ((symbolp expr) (symbol-value expr))
   ((SPECIAL-FORM-P (car expr)) (EVAL-SPECIAL-FORM expr))
   ((fboundp (car expr)) (apply (car expr) (cdr exp)))
   (t (error "unknown expression type : EVAL %s" exp))))
#+END_SRC
* Variables
~max-specpdl-size~ is 1300 by default, which limits lisp variable bindings(~let~) and ~unwind-protect~
** buffer-local variables
*** =make-variable-buffer-local=, =make-local-variable=
*** =with-current-buffer=, =get-buffer=
*** =local-buffer-p=
*** =buffer-local-value=
#+BEGIN_SRC elisp
(setq foo "global foo")
(make-local-variable 'foo)
foo
(setq foo "local foo")
foo
(with-current-buffer "*Messages*" foo) ;; global foo
#+END_SRC
#+BEGIN_SRC elisp
(local-variable-p 'foo (get-buffer "*Messages*"));; nil
(with-current-buffer "*Messages*"
  (buffer-local-value 'foo (get-buffer (current-buffer))))
(default-value 'foo)
#+END_SRC
#+BEGIN_SRC elisp
(kill-local-variable 'foo)
(setq foo "I'm local variable!")
(let ((foo "I'm local variable!"))
  (set (make-local-variable 'foo) "I'm buffer-local variable!")
  (setq-default foo "This is a variable!")
  (message foo))
(message foo)
#+END_SRC
** scope of variables(DYNAMIC BINDINGS)
*** global variables(removed only when quiting emacs or =unintern= from =obarray=)
*** buffer-local variables(removed when killing buffer or =kill-local-variable=)
*** let-binded local variables(similar with local/automatic variable in C, dynamic extent)
*** function argument list variables
#+BEGIN_SRC elisp
;; user cannot get x binded in binder
(defun binder(x) (foo 5))
(defun user () (list x))
(defun foo (ignore) (user))
(binder 10) ;; (10)
#+END_SRC
#+BEGIN_SRC elisp
;; TODO
(progn
(defun make-add (n) (function (lambda (m) (+ n m))))      ; Return a function.
(fset 'add2 (make-add 2)) ; Define function `add2' with `(make-add 2)'.
(add2 4)         ; Try to add 2 to 4.
)
#+END_SRC

** other functions
=boundp=, =default-boundp=, =makeunbound=, =kill-local-variable=, =kill-all-local-variables=
#+BEGIN_SRC elisp
(setq foo "local foo")
foo                                     ; => "local foo"
(boundp 'foo)                           ; => t
(default-boundp 'foo)                   ; => t
(makunbound 'foo)                       ; => foo
foo                                     ; This will signal an error
(default-boundp 'foo)                   ; => t
(kill-local-variable 'foo)              ; => foo
#+END_SRC
** naming variables
*** =-hook=
*** =-function= value is function
*** =-functions= value is function list
*** =-flag= nil/non-nil
*** =-predicate= judge nil or non-nil
*** =-program/-command= some program/shell command
*** =-form= form
*** =-forms= form list
*** =-map= key maps
* Functions and Commands
** syntax
#+BEGIN_SRC elisp
(defun float-equal (f1 f2 &optional err)
  (if err
      (setq err (abs err))
    (setq err 1.0e-6))
  (or
   (and (= f1 0) (= f2 0))
   (<
    (/ (abs (- f1 f2)) (max (abs f1) (abs f2)))
    err)))
(float-equal 2.0000 1.9999)
(float-equal 2.0000 1.9999 1.0e-3)
#+END_SRC

** docstring
** function call
=funcall=, =apply=
#+BEGIN_SRC elisp
(funcall 'list 'x '(y) '(z)) ;; (x (y) (z))
(apply 'list 'x '(y) '(z))  ;; (x (y) z)
#+END_SRC
** macro
#+BEGIN_SRC elisp
(defmacro foo (arg)
  (list 'message "%d-%d" arg arg))
(defun bar (arg)
  (message "%d-%d" arg arg))
(let ((i 1))
  (foo (incf i)))
(let ((i 1))
  (bar (incf i)))
#+END_SRC
#+BEGIN_SRC elisp
`(a list of  ,(+ 2 3) elements) ;; (a list of 5 elements)
'(a list of  ,(+ 2 3) elements) ;; (a list of \, (+ 2 3) elements)
(setq some-list '(2 3))
'(1 ,some-list 4 ,@some-list) ;;(1 (\, some-list) 4 (\,@ some-list))
`(1 ,some-list 4 ,@some-list) ;;(1 (2 3) 4 2 3)
#+END_SRC

** commands
** Q&A
*** traverse tree
*** switch major mode
#+BEGIN_SRC elisp
(defvar switch-major-mode-history nil)
(defun switch-major-mode (mode)
  (interactive
   (list
    (intern
     (completing-read "Switch to mode: "
                      obarray (lambda (s)
                                (and (fboundp s)
                                     (string-match "-mode$" (symbol-name s))))
                      t nil 'switch-major-mode-history))))
  (setq switch-major-mode-history (cons (symbol-name major-mode) switch-major-mode-history))
  (funcall mode))
#+END_SRC

* Regulation Expressions
** _char-table_ and _standard-synatax-table_
#+BEGIN_SRC elisp
(regexp-opt '("foobar" "foobaz" "foo")) ;;"foo\\(?:ba[rz]\\)?" 
(regexp-quote "f*") ;; "f\\*"
(describe-syntax)
(describe-categories)
#+END_SRC

* Buffer
** buffer-name
** current-buffer
#+BEGIN_SRC elisp
(set-buffer "*Messages*")
(message (buffer-name))
(progn
  (set-buffer "*Messages*")
  (message (buffer-name))) ;; "*Messages*"
#+END_SRC
#+BEGIN_SRC elisp
(save-current-buffer
  (set-buffer "*scratch*")
  (goto-char (point-min))
  (set-buffer "*Messages*"))
(save-excursion
  (set-buffer "*scratch*")
  (goto-char (point-min))
  (set-buffer "*Messages*"))
#+END_SRC

** =get-buffer-create=, =generate-new-buffer=, =kill-buffer= with =kill-buffer-query-function=, =kill-buffer-hook=, =buffer-live-p=, =buffer-list=
** mark and position
#+BEGIN_SRC elisp
(setq foo (make-marker)) ;;#<marker in no buffer>
(set-marker foo (point))
(point-marker)
(copy-marker 20)
(copy-marker foo)
(marker-position foo) ;; 22304
(marker-buffer foo)
(mark) ;; current mark
(princ mark-ring)
(push-mark)
(pop-mark)
#+END_SRC
#+BEGIN_SRC elisp
(goto-char (point-min))
(forward-char 10)
(forward-char -10)
(forward-line 2)
(forward-word -2)
(backward-word 2)
#+END_SRC
** =buffer-string=, =buffer-substring=, =char-before=, =char-after=
** modify buffer contents:
- =delete-char=, =delete-backward-char=, =delete-region=
- =re-search-forward=, =re-search-backward=
- =replace-match=
** Q&A
*** show-region
#+BEGIN_SRC elisp
(defun show-region (beg end)
  (interactive
   (if (or (null transient-mark-mode) mark-active)
       (list (region-beginning) (region-end))
     (list (point-min) (point-max))))
  (message "region start from %d to %d" beg end))
#+END_SRC
*** mark-whole-sexp
#+BEGIN_SRC elisp
(defun mark-whole-sexp ()
  (interactive)
  (let ((bound (bounds-of-thing-at-point 'sexp)))
    (if bound
        (progn
          (goto-char (car bound))
          (set-mark (point))
          (goto-char (cdr bound)))
      (message "no sexp found at point"))))
#+END_SRC

*** oowrite-table-convert
* Window
** differences with _frame_
*** WINDOW: display buffer on screen
*** FRAME: the part for Emacs using screen
*** Emacs has >=1 frames, one frame has >= 1 windows
** split window
#+BEGIN_SRC elisp
(selected-window)
(split-window)
(window-tree)
#+END_SRC
** delete window
#+BEGIN_SRC elisp
(setq foo (selected-window))
(delete-window)
(windowp foo)
(window-live-p foo)
#+END_SRC
** window configuration
#+BEGIN_SRC elisp
(setq foo (current-window-configuration))
(set-window-configuration foo)
#+END_SRC
** selete window
#+BEGIN_SRC elisp
(progn
  (setq foo (selected-window))
  (message "original window: %S" foo)
  (other-window 1)
  (message "current window: %S" (selected-window))
  ;; (select-window foo)
  ;; (message "back to window: %S" foo)
  )
#+END_SRC
=save-selected-window=, =with-selected-window=
#+BEGIN_SRC elisp
(save-selected-window
  (select-window (next-window))
  (goto-char (point-min)))
#+END_SRC








** window size
#+BEGIN_SRC elisp
(window-height) ;; 22
(window-body-height) ;; 20
(window-width) ;; 139
(window-edges) ;;(0 21 142 43)
(window-inside-edges) (2 22 141 42)
(window-pixel-edges) ;;(0 378 1278 774)
(window-inside-pixel-edges) ;;(18 396 1269 756)
#+END_SRC
** window related buffer
#+BEGIN_SRC elisp
(window-buffer)
(window-buffer (next-window))
(get-buffer-window (get-buffer "*scratch*")) ;; nil?
(get-buffer-window-list (get-buffer "*scratch*")) ;; nil?
#+END_SRC


** change display region: =set-window-start=, =window-start=, =pos-visible-window-p=
** Q&A
*** save window location info
*** improve save window function
* File
** open file process
** read/write
#+BEGIN_SRC elisp
(with-current-buffer
    (find-file-noselect "=/.vimrc")
  buffer-file-name)
(find-buffer-visiting "=/.vimrc")
(get-file-buffer "=/.emacs.d")
(get-file-buffer "=/.recentf")
#+END_SRC
=insert-file-contents=, =write-region=
** file information
#+BEGIN_SRC elisp
(setq vimrc-file "=/.vimrc")
(file-exists-p vimrc-file)
(file-readable-p vimrc-file)
(file-executable-p "=/.emacs.d") ;; t
(format "%o" (file-modes vimrc-file)) ;; 664
(file-regular-p vimrc-file)
(file-directory-p vimrc-file)
(file-symlink-p vimrc-file) ;; "/home/hongxuchen/src/mine/dotfiles/_vimrc"
(file-truename vimrc-file) ;;"/home/hongxuchen/src/mine/dotfiles/_vimrc"
#+END_SRC

** modify file information
=rename-file=, =copy-file=, =delete-file=, =make-directory=
=set-file-times=, =set-file-modes=
** filename operations
#+BEGIN_SRC elisp
(file-name-base vimrc-file) ;; ".vimrc"
(file-name-directory vimrc-file) ;; "=/"
(file-name-nondirectory (file-truename vimrc-file));; "_vimrc"
(file-name-sans-extension "=/non-exist.tar.gz") ;; "=/non-exist.tar"
(file-name-sans-versions "=/non-exist.tar.gz==") ;; "=/non-exist.tar.gz="
(file-name-absolute-p "=chx") ;; t
(expand-file-name "=/non-exist.tar")
(expand-file-name "non-exist.tar") ;; append current-directory with file name
(file-relative-name "=/.emacs.d/non-exist.tar")
(file-name-as-directory "=/non-exist.tar")
#+END_SRC

** make temp files
#+BEGIN_SRC elisp
(make-temp-name "../foo") ;; ../foo20947FU
(make-temp-name "../foo")
#+END_SRC

** read directory files
** handle
#+BEGIN_SRC text
`access-file', `add-name-to-file', `byte-compiler-base-file-name',
`copy-file', `delete-directory', `delete-file',
`diff-latest-backup-file', `directory-file-name', `directory-files',
`directory-files-and-attributes', `dired-call-process',
`dired-compress-file', `dired-uncache',
`expand-file-name', `file-accessible-directory-p', `file-attributes',
`file-name-all-completions', `file-name-as-directory',
`file-name-completion', `file-name-directory', `file-name-nondirectory',
`file-name-sans-versions', `file-newer-than-file-p',
`file-ownership-preserved-p', `file-readable-p', `file-regular-p',
`file-symlink-p', `file-truename', `file-writable-p',
`find-backup-file-name', `find-file-noselect',
`get-file-buffer', `insert-directory', `insert-file-contents',
`load', `make-auto-save-file-name', `make-directory',
`make-directory-internal', `make-symbolic-link',
`rename-file', `set-file-modes', `set-file-times',
`set-visited-file-modtime', `shell-command', `substitute-in-file-name',
`unhandled-file-name-directory', `vc-registered',
`verify-visited-file-modtime',
`write-region'.
#+END_SRC
** Q&A
*** TODO extract header file
*** TODO emulate =chmod=
*** TODO my-directory-files
* Text
** Get Text Props
#+BEGIN_SRC elisp
(setq foo (concat "abc"
                  (propertize "cde" 'face 'bold))) ; => #("abccde" 3 6 (face bold))
(get-text-property 3 'face foo)                    ; => bold
(save-excursion
  (goto-char (point-min))
  (insert foo))
(get-text-property 4 'face)                        ; => bold
#+END_SRC
** Change Text Props
#+BEGIN_SRC elisp
(let ((str "abc"))
  (put-text-property 0 3 'face 'bold str)
  str)                                  ; => #("abc" 0 3 (face bold))
#+END_SRC
#+BEGIN_SRC elisp
(setq foo (propertize "abcdef" 'face 'bold
                      'pointer 'hand))
;; => #("abcdef" 0 6 (pointer hand face bold))
(set-text-properties 0 2 nil foo)       ; => t
foo   ; => #("abcdef" 2 6 (pointer hand face bold))
(remove-text-properties 2 4 '(face nil) foo) ; => t
foo   ; => #("abcdef" 2 4 (pointer hand) 4 6 (pointer hand face bold))
(remove-list-of-text-properties 4 6 '(face nil pointer nil) foo) ; => t
foo   ; => #("abcdef" 2 4 (pointer hand))
#+END_SRC
** View Props inside Text
#+BEGIN_SRC elisp
(setq foo (concat "ab"
                  (propertize "cd" 'face 'bold)
                  (propertize "ef" 'pointer 'hand)))
;; => #("abcdef" 2 4 (face bold) 4 6 (pointer hand))
(next-property-change 1 foo)                  ; => 2
(next-single-property-change 1 'pointer foo)  ; => 4
(previous-property-change 6 foo)              ; => 4
(previous-single-property-change 6 'face foo) ; => 4
#+END_SRC
#+BEGIN_SRC elisp
(text-property-any 0 6 'face 'bold foo)          ; => 2
(text-property-any 0 6 'face 'underline foo)     ; => nil
(text-property-not-all 2 6 'face 'bold foo)      ; => 4
(text-property-not-all 2 6 'face 'underline foo) ; => 2
#+END_SRC
** Q&A
*** TODO highlight source code


