for ~val l= List(1,1,2,1,)~ Scala does not support the use of:  

#+BEGIN_SRC scala
l match{
  case x::x::y::x::xs => println(l)
  case _ => println("not match")
  }
#+END_SRC

The remedies are like:  

- Specify a ~same~ function:

#+BEGIN_SRC scala
def same[A](xs: A*)=xs forall(xs.head==)
l match{
  case x1::x2::x3::x4::xs if same(x1,x2,x4) => println(l)
  case _ => println("not match")
}
#+END_SRC

- Specify the value(~x~) of the same and use \~x\~ in the match:
  
#+BEGIN_SRC scala
val x = list.head 
list match {
  case ~x~::~x~::~x~::~x~::xs => ....
}
#+END_SRC

- Also ~Option~ can be used here

#+BEGIN_SRC scala
val x = list.head
(l.headOption,l) match{
  case (Some(~x~),~x~::~x~::x1::~x~::xs) => println(l)
  case (None,_) => println("no match")//default,no need for *case _*
}
#+END_SRC

And a variant of this is:

#+BEGIN_SRC scala
val x = list.head
l.headOption map (x => l match { 
   case ~x~::~x~::x1::~x~::xs => println(l)
   case _ => println("no match")
 }) getOrElse {
   // do what you'd have done for an *empty* list...
 }
#+END_SRC


reference:[[http://stackoverflow.com/questions/13963507/use-same-variable-multiple-times-within-one-pattern][Use same variable multiple times within one pattern]]
