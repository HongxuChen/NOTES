#+TITLE: GNU Make in Detail for Beginners

[[http://www.linuxforu.com/2012/06/gnu-make-in-detail-for-beginners/][Reference]]

* A sample project
** module.h
#+INCLUDE: "beginners/module.h" src c

** module.c
#+INCLUDE: "beginners/module.c" src c

** main.c
#+INCLUDE: "beginners/main.c" src c

* Writing a Makefile from scratch
** Makefile1
#+INCLUDE: "beginners/Makefile1" src makefile

* Makefile processing
** look file ~Makefile~/~makefile~ or specified by ~-f~
** check whether ALL dependencies are met
** target is
*** filename: compare timestamps of target files and its dependency files
files in dependency tree are newer: all targets in affected branch of tree are executed
*** non-file: always executed
** For the execution of each target, make prints the actions while executing them.
*** Each of the actions (shell commands written on a line) are executed in a SEPARATE sub-shell
*** By default, execution of a Makefile stops when any command returns a non-zero (error) value.

* More bytes on Makefiles
** Dealing with assignments
*** Simple assignment(~:=~)
*** Recursive assignment(~=~)
for variables/values that are re-evaluated every time they are encountered in an action that is being executed.
*** Conditional assignment(~?=~)
assign the given value to the variable iff the variable does not have a value.
*** Appending(~+=~)
#+BEGIN_SRC makefile
CC = gcc
cc += -W
#+END_SRC
** Using patterns and special variables
~%~ can be used for wildcard pattern-matching to provide generic targets; when used in dependency list, it is replaced with the same string that was used to perform substitution in the target.
#+BEGIN_SRC makefile
%.o: %.c
        actions
#+END_SRC
*** ~$@~: full target name of the current target
*** ~$?~: returns the dependencies that are newer than the current target
*** ~$*~: returns the text that corresponds to % in the target
*** ~$<~: name of the first dependency
*** ~$^~: name of all the dependencies with space as the delimiter
** Action modifiers
We can change the behaviour of the actions we use by prefixing certain action modifiers to the actions.
*** ~-~ (minus): ignore error while executing action
*** ~@~ (at) suppresses the standard print-action-to-standard-output behaviour of make. For instance, ~@each Message~ would only print "Message"
** Use PHONY to avoid file-target name conflicts
** Simulating make without actual execution:~make -n~
** Nested Makefiles
#+BEGIN_SRC makefile
subtargets:
        cd subdirectory && $(MAKE)
#+END_SRC
** Improved makefile:
#+INCLUDE: "beginners/Makefile2" src makefile

** Make in non-complation contexts
*** example scenario:
**** directory structure:
#+BEGIN_SRC text
.
├── images
│   ├── 001.jpg
│   ├── 002.JPG
└── thumbs
    ├── 001.jpg
    └── 002.JPG
#+END_SRC
**** create a thumbnail in ~thumbs~ whenever a new image is added
**** the thunbnailing process should only be done for new/updated images
*** solution:
#+BEGIN_SRC makefile
FILES = $(shell find images -type f -iname "*.jpg" |sed 's/images/thumbs/g')
CONVER_CMD = convert -resize "32x32" $< $@
MSG = @echo "\nUpdating thumbnail" $@
.PHONY = all clean

all: ${FILES}

thumbs/%.jpg: images/%.jpg
        $(MSG)
        $(CONVER_CMD)

thumbs/%.JPG: images/%.JPG
        $(MSG)
        $(CONVER_CMD)

clean:
        $echo "Cleaning up files"
        rm -rf thumbs
#+END_SRC
