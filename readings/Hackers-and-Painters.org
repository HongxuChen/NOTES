* Why Nerds Are Unpopular

Being smart seems to make you unpopular.

If someone had offered me the chance to be the most popular kid in school, but only at the price of being average intelligence(humor me here), I wouldn't have taken it.

To them the thought of average intelligence is unbearable.

Nerds serve two masters. They want to be popular, certainly, but they want even more to be smart.

No art, however minor, demands less total dedication if you wanted to excel in it.    -- Alberti

Popular isn't just something you are or you aren't, but something you make yourself.

The main reason nerds are unpopular is that they have other things to think about.Their attention is drawn to books or the natural world, not fashions and parties.

While the nerds are trained to get the right answers, the popular kids were being trained to please.

A nerd is someone who isn't socially adept enough.

Few smart kids can spare the attention that popularity requires. Unless they also happen to be good-looking, natural athletes, or siblings of popular kids, they'll tend to become nerds. And that's why smart people's lives are worst between, say, the ages of eleven and seventeen. Life at that age revolves far more around popularity than before or after.

Kids do care what their peers think in elementary school, but this isn't their whole life, as it later becomes.

Around the age of eleven, though, kids seem to start treating their family as a day job. They create a new world among themselves, and standing in this world is what matters, not standing in their family. Indeed, being trouble in their family can win them points in the world they care about.

I wish they had just told us outright that we were savages and our world was stupid.

To be unpopular in school is to be actively persecuted.

Why do teenage kids do it?(persecute nerds)
Partly because teenagers are still half children, and many children are just intrinsically cruel.
Another reason kids persecute nerds is to make themselves feel better.
But I think the main reason other kids persecute nerds is that it's part of the mechanism of popularity.

Before you develop a conscience, torture is amusing.

When you treat water, you lift yourself up by pushing water down.

Popularity is only partially about individual attractiveness. It's much more about alliances. To become more popular, you need to be constantly doing things that bring you close to other popular people, and nothing brings people closer than a common enemy.

Like a politician who wants to distract voters from bad times at home, you can create an enemy if there isn't a real one.

Attack an outsider makes them all insiders.

If it's any consolation to the nerds, it's nothing personal.

Because they're at the bottom of the scale, nerds are a safe target for the entire school.

The distribution of popularity is not a pyramid, but tapers at the bottom like a pear. The least popular group is quite small. So there are more people who want to pick on nerds than there are  nerds.

As well as gaining points by distancing oneself from unpopular kids, one loses points by being close to them.

Unpopularity is a communicable disease; kids too nice to pick on will still ostracize them in self-defense.

Their other interests leave them little attention to spare for popularity, and since popularity resembles a zero-sum game, this in return makes them targets for the whole school.

Public school teachers are in much the same position as prison wardens.

The important things about the real world is not that it's populated by adults, but that it's very large, and the things you do have real effects. That's what school, prison, and ladies-who-launch all lack.

When the things you do have real effects, it's no longer enough just to be pleasing. It starts to be important to get the right answers, and that's where nerds show to advantage.

Out in the real world, nerds collect in certain places and form their own societies where intelligence is the most important thing.

Sometimes the current even starts to flow in the other direction: sometimes, particularly in university math and science departments, nerds deliberately exaggerate their awkwardness in order to seem smarter.

If I could go back and give my thirteen year old self some advice, the main thing I'd tell him would be to stick his head up and look around.

Suburbs are deliberately designed to exclude the outside world, because it contains things that could endanger children.

What bothers me is not that the kids are kept in prisons, but that (a) they aren't told about it, and (b) the prisons are run mostly by the inmates.

There's nothing wrong with the system; it's just inevitable that kids will be miserable at that age.

Teenage apprentices in the Renaissance were working dogs. Teenage now are neurotic lapdogs.

The only way to escape this empty life was to submit to it.

Teenage kids, even rebels, don't like to be alone, so when kids opt out of the system, they tend to do it as a group.

Freaks and nerds were allies, and there was a good deal of overlap between them.

No doubt some of the freaks ultimately used drugs to escape from other problems ---- trouble at home, for example. But, in my school at least, the reason most kids started using drugs was rebellion.

Misrule breeds rebellion.

There is nothing inevitable about the current system. It has come about by default.

School is a strange, artificial thing, half sterile and half feral. It's all-encompassing, like life, but it isn't the real thing. It's only temporary, and if you look, you can see beyond it even while you're still in it.

Several problems we take for granted are in fact not insoluble after all.

* Hackers and Painters

Hacking and painting have a lot in common. In fact, of all the different types of people I've known, hacker and painters are among the most alike.

What hackers and painters have in common is that they're both makers.

I've never liked the term "computer science". The main reason I don't like it is that there's no such thing. Computer science is grab bag of tenuously related areas thrown together by an accident of history, like Yugoslavia. At one end you have people who are really mathematicians, but call what they're doing computer science so they can get DARPA grants. In the middle you have people working on something like the natural history of computers -- studying the behavior of algorithms for routing data through networks, for example. And then at the other extreme you have the hackers, who are trying to write interesting software, and for whom computers are just a medium of expression, as concrete is for architects or paint for painters. It's as if mathematicians, physicist, and architects all had to be in the same department.

Sometimes what the hackers do is called "software engineering", but this term is just as misleading. Good software designers are no more engineers than architects are. The border between architecture and engineering is not sharply defined, but it's there. It falls between what and how: architects decide what to do, and engineers figure out how to do it.

What and how should not be kept too separate. You're asking for trouble if you try to decide what to do without understanding how to do it. But hacking can certainly be more than just deciding how to implement some spec. At least, it's creating the spec -- through it turns out the best way to do that is to implement it.

Perhaps one day "computer science" will, like Yugoslavia, get broken up into its component parts.

Bundling all these different types of work together in one department may be convenient administratively, but it's confusing intellectually.

The people in the middle are doing something like an experimental science. But the people at either end, the hackers and the mathematicians, are not actually doing science.

The mathematicians don't seem to bothered by this. They happily set to work proving theorems like the other mathematicians over in the math department, and probably soon stop noticing that the building they work in says "computer science" on the outside. But for the hackers this label is a problem. If what they're doing is called science, it makes them feel they ought to be acting scientific, So instead of doing what they really want to do, which is to design beautiful software, hackers in universities and research labs feel they ought to be writing research papers.

In the best case, the papers are just a formality. Hackers write software, and then write a paper about it, and the paper becomes a proxy for the achievement represented by the software. But often this mismatch causes problems, It's easy to drift away from building beautiful things toward building ugly things that make more suitable subjects for research papers.

Unfortunately, beautiful things don't always make the best subjects for papers. Number one, research must be original -- and as anyone who has written a PhD dissertation knows, the way to be sure you're exploring virgin territory is to stake out a piece of ground that on one wants. Number two, research must be substantial -- and awkward systems yield meatier papers, because yo can write about the obstacles you have to overcome in order to get things done.Nothing yields meaty problems like starting with the wrong assumptions. Most of AI is an example of this rule; if you assume that knowledge can be represented as a list of predicate logic expressions whose arguments represent abstract concepts, you'll  have a lot of papers to write about how to make this work. As Ricky Ricardo used to say, "Lucy, you got a lot of explaining to do."

The way to create something beautiful is often to make subtle tweaks to something that already exists, or to combine existing ideas in a slightly new way. This kind of work is hard to convey in a research paper.

Measuring what hackers are actually trying to do, designing beautiful software, would be much more difficult. You need a good sense of design to judge good design. And there is no correlation, exception possibly a negative one, between people's ability to recognize good design and their confidence that they can.

The only external test is time. Over time, beautiful things tend to thrive, and ugly things tend to get discarded. Unfortunately, the amounts of involved can be longer than human lifetimes. Samuel Johnson said it took a hundred years for a writer's reputation to converge. You have to wait for the writer's influential friends to die, and then for all theirs followers to die.

Hackers need to understand the theory of computation about as much as painters need to understand paint chemistry. You need to know how to calculate time and space complexity, and perhaps also the concept of a state machine, in case you want to write a parser. 

Painting has been a much richer source of ideas than the theory of computation.

You should figure out programs as you're writing them, just as writers and painters and architects do.

A programming language is for thinking of programs, not for expressing programs you've already thought of. It should be a pencil, not a pen. Static typing would be a fine idea if people actually did write programs the way they taught me to in a college. But that's now how any of the hackers I know write programs. We need a language that lets us scribble and smudge and smear, not a language where you have to sit with a teacup of types balanced on your knee and make polite conversation with a strict old aunt of a compiler.

Everyone in the sciences secretly believes that mathematicians are smarter than they are.

The result is that scientists tend to make their work look as mathematical as possible.

If universities and research labs keep hackers from doing the kind of work they want to do, perhaps the place for them is in companies. Unfortunately, most companies won't let hackers do what they want either. Universities and research labs force hackers to be scientists, and companies force them to be engineers.

Programmers were seen as technicians who translated the versions(if that is the word) of product managers into code.

Only a small percentage of hackers can actually design software, and it's hard for the people running a company to pick these out. So instead of entrusting the future of the software to one brilliant hacker, most companies set things up so that it is designed by committee, and the hackers merely implement the design.

Big companies want to decrease the standard deviation of design outcomes because they want to avoid disasters.

Big companies win by sucking less than other big companies.

If you can figure out a way to get in a design war with a company big enough that its software is designed by product managers, they'll never be able to keep up with you.

It's hard to engage a big company in a design war, just as it's hard to engage an opponent inside a castle in hand-to-hand combat.

The place to fight design wars is in new markers, where no one has yet managed to establish any fortifications.

One way to build great software is to start  your own startup.
Two problems:
(a) In a start up you have to do so much beside write software.
(b) There is not much overlap between the kind of software that makes money and the kind that's interesting to write.

The day job: you have one kind of work you do for money, and another for love.
This is what open source hacking is all about.

You can't do anything really well unless you love it, and if you love to hack you'll inevitably be working on projects of your own.

Most hackers don't learn to hack by taking college courses in programming. They learn by writing programs of their own at age thirteen.

Maybe it would be good for hackers to act more like painters, and regularly start over from scratch, instead of continuing to work for years on one project, and trying to incorporate all their later ideas as revisions.

Hackers start original, and get good, and scientists start good, and get original.

Hackers can learn to program by looking at good programs -- not just at what they do, but at the source code.

It's unrealistic to expect that the specifications for a program will be perfect.

we should be just be as worried about premature design -- deciding too early what a program should do.

A good programming language should, like oil paint, make it easy to change your mind.

The easiest program to change is on that's short.

Great software requires a fanatical devotion to beauty.

If a hacker were a mere implementor, turning a spec into code, then he could just work his way through it from one end to the other like someone digging a ditch, But if the hacker is a creator, we have to take inspiration into account.

In hacking, work comes in cycles. Sometimes you get excited about a new project and you want to work sixteen hours a day on it. Other times nothing seems interesting.

It's a good idea to save some easy tasks for moments when you would otherwise stall.

I like debugging: it's the one time that hacking is as straightforward as people think it is. You're going to win in the end.

The right way to collaborate is to divide project into sharply defined modules, each with a definite owner; and with interfaces between them that are as carefully designed and, if possible, as articulated as programming languages.

Looking at things from other people's point of view is practically the secret of success.

Understanding how someone else see things doesn't  imply that you'll act in his interest.

Empathy is probably the single most important difference between a good hacker and a great one.

One way to tell how good people are at empathy is to watch them explain technical matter to someone without a technical background.

To write good software you have to understand how little users understand.

Part of what software has to do is explain itself.

Programs should be written for people to read, and only incidentally for machines to execute.

After all, you only get one life.

There is always a big time lag in prestige. It's like light from a distant star.

So while I admit that hacking doesn't seem as cool as painting now, we should remember that painting itself didn't seem as cool in its glory days as it does now.

A new medium appears, and people are so excited about it that they explore most of its possibilities in the first couple generations. Hacking seems to be in this phrase now.

How cool hacking turns out to be will depend on what we can do with this new medium.

* What You Can't Say

Fashion is mistaken for good design; moral fashion is mistaken for good.

It would be a remarkable coincidence if ours were the first era to get everything just right.

You just think whatever you're told.

Almost certainly, there is something wrong with you if you don't think things you don't dare say out loud.

Statements that make people mad are the ones they worry might be believed. The statement that make people maddest are those they worry might be true.

If we could book into the future it would be obvious which of your ideas they'd laugh at. We can't do that, but we can do something almost as good: we can look into the past. Another way to figure out what we're getting wrong is to look at what used to be acceptable and now is unthinkable.

We may imagine that we are a great deal smarter and more virtuous than past generations, but the more history you read, the less likely this seems. People in past times were much like us.

Moral fashion more often seem to be created deliberately.

Just as there is nothing so unfashionable as the last, discarded fashion, there is nothing so wrong as the principles of the most recently defeated opponent.

The second group adopt the fashion not because they want to stand out but because they are afraid of standing out. If you want to figure out what we can't say, look at the machinery of fashion and try to predict what it would make un-sayable.

I do it, first of all, for the same reason I did under rocks as a kid: plain curiosity. And I'm especially curious about anything that's forbidden.
Second, I do it because I don't like the idea of being mistaken.
Third, I do it because it's good for the brain.

Great work tends to grow out of ideas that others have overlooked, and no idea is so overlooked as one that's unthinkable. The m.o. of scientists, or at least of the good ones, is precisely that: look for places where conventional wisdom is broken, and they try to pry apart the cracks and see what's underneath. That's where new theories come from.

A good scientist does not merely ignore conventional wisdom, but makes a special effort to break.

Scientists seem much more willing to look under rocks.

Because it's cleared in the sciences whether theories are true or false, you have to be smart to get jobs as a scientist rather than just a good politician.

In a competitive field, you can win big by seeing things that others daren't.

Training yourself to think unthinkable thoughts has advantages beyond the thoughts themselves.

When you find something you can't say, what do you do with it? My advice is, don't say it. Or at least, pick your battles.

The most important thing is to think what you want, not to say what you want.

The first rule of Fight Club is, you do not talk about Fight Club.

Closed thoughts and an open face.

Every era has its heresies, and if you don't get imprisoned for them, you will at least get in enough trouble that it becomes a complete distraction.

The problem is, there are so many things you can't say. If you said them all you'd have no time left for your real work.

The optimal plan, if you can manage it, is to have a few trusted friends you can speak openly to. This is not just a way to develop ideas; it's also a good rule of thumb for choosing friends. The people you can say heretical things to without getting jumped on are the most interesting to know.

Perhaps the best policy is to make it plain that you don't agree with whatever zealotry is current in your time, but not to be specific about what you disagree with.

One way to do this is to ratchet the debate up one level of abstraction.
Another way to counterattack is with metaphor.
Best of all, probably, is humor.

It's the nature of fashion to be invisible.

Fashion doesn't seem like fashion to someone in the grip of it. It just seems like the right thing to do.

From one end of a pendulum's swing, the other end seems especially fa away.

Always be questioning. That's the only defence.

* Good Bad Attitude

There is a gradual continuum between rule breaking that's merely ugly and rule breaking that is brilliantly imaginative.

Suppress me, and you suppress the other.

But even factoring in their annoying eccentricities, the disobedient attitude of hackers is a net win.

Hackers are unruly. That is the essence of hacking.

The spirit of resistance to government is so valuable on certain that I will it always to be kept alive. Thomas Jefferson

* The other Road Ahead

The whole idea of "your computer" is going away, and being replace with "your data".

With web-based applications, everyone uses the same version, and bugs can be fixed as soon as they're discovered.

Designing web-based software is like designing a city rather than a building.

Software has to be designed by hackers who understand design, not designers who know a little about software. If you can't design software as well as implement it, don't start up.

You can do as much that Microsoft can't as they can do that you can't.

Ch06: How to Make Wealth

Wealth is not the same thing as money.
Wealth is what you want, not money.
Money is a way of moving wealth, and in practice they are usually interchangeable.
Money is a side effect of specialization.
There is not a fixed a mount of wealth in the world.

The world is -- and you especially are -- one pristine old car the richer.

You can't make the pie large.

With the rise of industrialization there are fewer and fewer craftsmen. One of the biggest remaining group is computer programmers.
The top 5% of programmers probably write 99% of the good software.

What a company does and has to do if it wants to exist is earn money. And the way most companies make money is by creating wealth.
Nearly all companies exist to do something people want.

It's doing something people want that matters, not joining the group.

In the right kind of business, someone who really devoted himself to work could generate ten or even a hundred times as much wealth as an average employee.

To get rich you need to get yourself in a situation with two things, measurement and leverage.

Every one who gets rich by their own efforts will be found to be in a situation with measurement and leverage.

A good hint of the present of leverage is the possibility of failure. Upside must be balanced by downside, so if there is big potential for gain there must be a terrible possibility of loss.

If you're in a job that feels safe, you are not going to get rich, because if there is no danger there is almost certainly no leverage.
All you need to do is be part of a small group working on a hard problem.

Smallness = Measurement

Technology = Leverage

It seems that most people got rich by creating wealth did it by develop new technology.

Small companies are more at home in this world, because they don't have layers of bureaucracy to slow them down.Also, technical advances tend to come from unorthodox approaches, and small companies are less constrained by conventions.

The best defense is a good offense. If you can develop technology that's simply too hard for competitors to duplicate, you don't need to rely on other defenses, Start by picking a hard problem, and then at every decision point, take harder choice.

Unfortunately there are a couple catches. One is that you can't choose the point on the curve that you want to inhabit. The other catch is that the payoff is only on average proportionate to your productivity.

Running a business is different from growing one.

Users are the only the proof that you've created wealth.
Number of users may not be the perfect test, but it will be very close.

Making wealth is not the only way to get rich.

Without the incentive of wealth, no one wants to do it.

The same recipe that make individual rich make countries powerful.

* Mind the Gap

Perhaps the CEO or the professional athlete has only ten times(Whatever that means) the skill and determination of an ordinary person. But it makes all the difference that it's concentrated in one individual.

To the extend that comes varies simply according to how much wealth people create, the distribution may be unequal, but it's hardly unjust.

In a modern society, increasing variation in income is a sign of wealth.

Materially and socially, technology seems to decreasing the gap between the rich and the poor, not increasing it.
Will people create if they can't get paid for it? Only if it's fun.

Society as a whole ends up poorer.

* A Plan for Spam

It's absolute poverty you want to avoid, not relative poverty.

If you compete with slaves you become a slave.

* Taste for Makers

Good design is simple.

Good design is timeless.

If something is ugly, it can't be the best solution.

Aiming at timeless is a way to make yourself find the best answer.
Aiming at timeless is also a way to evade the grip of fashion.

If you want to make something that will appear to future generations, one way to do it is to appeal to past generations.

Good design solves the right problem.

Good design is suggestive.

Good design is often slightly funny.

Humor is related to strength.

The mark -- or at least the prerogative -- of strength is not to take oneself too seriously.

Good design may not have to be funny, but it's hard to imagine something could be called humorless also being good design.

Good design is hard.

If you're not working hard, you're probably wasting your time.

Not every kind of hard is good. There is good pain and bad pain.

Good design looks easy.

Good design use symmetry.

Good design resembles nature.

Good design is redesign.
It's rare to get things right the first time.

Good design can copy.

Attitudes to copying often make a round trip. A novice imitates without knowing it; next he tries consciously to be original; finally, he decides it's more important to be right than original.

Good design happens in chunks.

Nothing is more powerful than a community of talented people working on related problems.

Good design is often daring.

Today's experiment error is tomorrow's new theory.

The recipe for great work is: very exacting taste, plus the ability to gratify it.
